// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role {
  admin
  professor
  student
}

enum EnrollStatus {
  Enrolled
  Drop
}

enum ChapterStatus {
  reading
  done
}

model User {
  userID    String    @id @default(cuid())
  username  String    @unique
  email     String    @unique
  password  String
  role      role
  verified  Boolean   @default(false)
  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp()
  Profile   Profile?
  Subject   Subject[]
  Enroll    Enroll[]
}

model Profile {
  profileID String   @id @default(cuid())
  fullname  String
  birthday  DateTime @db.Date
  phone     String
  bio       String?
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp()
  User      User?    @relation(fields: [userID], references: [userID])
  userID    String?  @unique
}

model Enroll {
  enrollID  String       @id @default(cuid())
  status    EnrollStatus @default(Enrolled)
  createdAt DateTime     @default(now()) @db.Timestamp()
  updatedAt DateTime     @default(now()) @updatedAt @db.Timestamp()
  User      User?        @relation(fields: [userID], references: [userID])
  userID    String?
  Subject   Subject?     @relation(fields: [subjectID], references: [subjectID])
  subjectID String?
}

model Category {
  categoryID String    @id @default(cuid())
  category   String
  Subject    Subject[]
  createdAt  DateTime  @default(now()) @db.Timestamp()
  updatedAt  DateTime  @default(now()) @updatedAt @db.Timestamp()
}

model Subject {
  subjectID   String    @id @default(cuid())
  subject     String
  image       String
  description String
  language    String
  createdAt   DateTime  @default(now()) @db.Timestamp()
  updatedAt   DateTime  @default(now()) @db.Timestamp()
  Lesson      Lesson[]
  Enroll      Enroll[]
  User        User?     @relation(fields: [userID], references: [userID])
  userID      String?
  Category    Category? @relation(fields: [categoryID], references: [categoryID])
  categoryID  String?
}

model Lesson {
  lessonID   String       @id @default(cuid())
  lesson     String
  createdAt  DateTime     @default(now()) @db.Timestamp()
  updatedAt  DateTime     @default(now()) @updatedAt @db.Timestamp()
  Assessment Assessment[]
  Chapter    Chapter[]
  Subject    Subject?     @relation(fields: [subjectID], references: [subjectID], onDelete: Cascade)
  subjectID  String?
}

model Chapter {
  chapterID String        @id @default(cuid())
  chapter   String  
  content   String
  status    ChapterStatus
  createdAt DateTime      @default(now()) @db.Timestamp()
  updatedAt DateTime      @default(now()) @updatedAt @db.Timestamp()
  Lesson    Lesson?       @relation(fields: [lessonID], references: [lessonID], onDelete: Cascade)
  lessonID  String?
}

model Assessment {
  assessmentID String   @id @default(cuid())
  assessment   String
  createdAt    DateTime @default(now()) @db.Timestamp()
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamp()
  Lesson       Lesson?  @relation(fields: [lessonID], references: [lessonID], onDelete: Cascade)
  lessonID     String?
}
