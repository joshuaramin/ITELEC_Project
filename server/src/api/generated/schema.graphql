### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  checkUsernameAvailability(username: String!): user
  createLessonChapter(chapter: String!, content: String!, lessonID: ID!): chapter
  createSubject(categoryID: ID!, file: Upload!, input: subjectInput, userID: ID!): subject
  createSubjectCategory(category: String!): category
  createSubjectEnroll(subjectID: ID!, userID: ID!): enroll
  createSubjectLesson(lesson: String!, subjectID: ID!): lesson
  createUserAccount(role: userRoles, user: userInput): user
  deleteLessonChapter(chapterID: ID!): chapter
  deleteSubject(subjectID: ID!): subject
  deleteSubjectCategory(categoryID: ID!): category
  deleteSubjectLesson(lessonID: ID!): lesson
  deleteUserAccount(userID: ID!): user
  findMyEmailAddress(email: String!): user
  login(password: String!, username: String!): token
  resetUserPassword(password: String!, retype: String!, userID: ID!): user
  updateLessonChapter(chapter: String!, chapterID: ID!, content: String!): chapter
  updateSubjectDescription(description: String!, subjectID: ID!): subject
  updateSubjectLessonTitle(lesson: String!, lessonID: ID!): lesson
  updateSubjectTitle(subject: String!, subjectID: ID!): subject
  updateUserProfile(input: profileInput): profile
  updateVerfiedAccount(userID: ID!): user
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type Query {
  getAllCategory: [category]
  getAllChapterByLessonID(lessonID: ID!): [chapter]
  getAllMyEnrolledSubject(orderBys: String!, userID: ID!): [enroll]
  getAllSubject(skip: Int!, take: Int!): [subject]
  getAllSubjectLesson(subjectID: ID!): [lesson]
  getAllUserByRole(role: userRoles, skip: Int!, take: Int!): [user]
  getEnrolledSubjectByIDs(subjectID: ID!, userID: ID!): Boolean
  getEnrollendById(enrollID: ID!): enroll
  getLessonChapter(chapterID: ID!): chapter
  getMySubjectCreated(userID: ID!): [subject]
  getMySubjectSearch(search: String!, userID: ID!): [subject]
  getSubjectById(subjectID: ID!): subject
  getSubjectBySearch(search: String!): [subject]
  getSubjectLessonID(lessonID: ID!): lesson
  getUserById(userID: ID!): [user]
  getUserProfileById(userID: ID!): profile
}

type Subscription {
  NewlyCreatedSubjectLesson(subjectID: ID!): lesson
  NewlyLessonChapterSubscription(lessonID: ID!): chapter
  NewlySubjectCreatedByUser(userID: ID!): subject
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type category {
  category: String
  categoryID: ID
  subject: [subject]
}

type chapter {
  chapter: String
  chapterID: ID
  content: String
  createdAt: DateTime
  status: String
  updatedAt: DateTime
}

type enroll {
  createdAt: DateTime
  enrollID: ID
  status: String
  subject: subject
  updatedAt: DateTime
  user: user
}

type lesson {
  assessmentCount: Int
  chapter: [chapter]
  chapterCount: Int
  lesson: String
  lessonID: ID
}

type profile {
  bio: String
  birthday: Date
  createdAt: DateTime
  fullname: String
  phone: PhoneNumber
  profileID: ID
  updatedAt: String
  user: user
}

input profileInput {
  birthday: Date
  fullname: String
  phone: PhoneNumber
  profileID: ID
}

type subject {
  createdAt: DateTime
  description: String
  enrolled: [enroll]
  image: String
  language: String
  lessonCount: Int
  lessons: [lesson]
  subject: String
  subjectID: ID
  tags: String
  updatedAt: DateTime
  user: user
}

input subjectInput {
  description: String
  language: String
  subject: String
}

type token {
  token: String
}

type user {
  createdAt: DateTime
  email: String
  password: String
  profile: profile
  role: String
  updatedAt: DateTime
  userID: ID
  username: String
  verified: Boolean
}

input userInput {
  birthday: Date
  email: String
  fullname: String
  password: String
  phone: PhoneNumber
  username: String
}

enum userRoles {
  admin
  professor
  student
}