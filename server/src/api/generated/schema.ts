/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    phone<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "PhoneNumber";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    Upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    phone<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "PhoneNumber";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    Upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  profileInput: { // input type
    birthday?: NexusGenScalars['Date'] | null; // Date
    fullname?: string | null; // String
    phone?: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    profileID?: string | null; // ID
  }
  subjectInput: { // input type
    description?: string | null; // String
    language?: string | null; // String
    subject?: string | null; // String
  }
  userInput: { // input type
    birthday?: NexusGenScalars['Date'] | null; // Date
    email?: string | null; // String
    fullname?: string | null; // String
    password?: string | null; // String
    phone?: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    username?: string | null; // String
  }
}

export interface NexusGenEnums {
  userRoles: "admin" | "professor" | "student"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
  PhoneNumber: any
  Upload: any
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  Subscription: {};
  category: { // root type
    category?: string | null; // String
    categoryID?: string | null; // ID
  }
  chapter: { // root type
    chapter?: string | null; // String
    chapterID?: string | null; // ID
    content?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    status?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  enroll: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    enrollID?: string | null; // ID
    status?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  lesson: { // root type
    lesson?: string | null; // String
    lessonID?: string | null; // ID
  }
  profile: { // root type
    bio?: string | null; // String
    birthday?: NexusGenScalars['Date'] | null; // Date
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    fullname?: string | null; // String
    phone?: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    profileID?: string | null; // ID
    updatedAt?: string | null; // String
  }
  subject: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    image?: string | null; // String
    language?: string | null; // String
    subject?: string | null; // String
    subjectID?: string | null; // ID
    tags?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  token: { // root type
    token?: string | null; // String
  }
  user: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: string | null; // String
    password?: string | null; // String
    role?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userID?: string | null; // ID
    username?: string | null; // String
    verified?: boolean | null; // Boolean
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    checkUsernameAvailability: NexusGenRootTypes['user'] | null; // user
    createLessonChapter: NexusGenRootTypes['chapter'] | null; // chapter
    createSubject: NexusGenRootTypes['subject'] | null; // subject
    createSubjectCategory: NexusGenRootTypes['category'] | null; // category
    createSubjectEnroll: NexusGenRootTypes['enroll'] | null; // enroll
    createSubjectLesson: NexusGenRootTypes['lesson'] | null; // lesson
    createUserAccount: NexusGenRootTypes['user'] | null; // user
    deleteSubject: NexusGenRootTypes['subject'] | null; // subject
    deleteSubjectCategory: NexusGenRootTypes['category'] | null; // category
    deleteSubjectLesson: NexusGenRootTypes['lesson'] | null; // lesson
    deleteUserAccount: NexusGenRootTypes['user'] | null; // user
    login: NexusGenRootTypes['token'] | null; // token
    updateLessonChapter: NexusGenRootTypes['chapter'] | null; // chapter
    updateSubject: NexusGenRootTypes['subject'] | null; // subject
    updateSubjectLesson: NexusGenRootTypes['lesson'] | null; // lesson
    updateUserProfile: NexusGenRootTypes['profile'] | null; // profile
    updateVerfiedAccount: NexusGenRootTypes['user'] | null; // user
  }
  Query: { // field return type
    getAllCategory: Array<NexusGenRootTypes['category'] | null> | null; // [category]
    getAllChapterByLessonID: Array<NexusGenRootTypes['chapter'] | null> | null; // [chapter]
    getAllSubject: Array<NexusGenRootTypes['subject'] | null> | null; // [subject]
    getAllSubjectLesson: Array<NexusGenRootTypes['lesson'] | null> | null; // [lesson]
    getAllUserByRole: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getEnrollendById: NexusGenRootTypes['enroll'] | null; // enroll
    getLessonChapter: NexusGenRootTypes['chapter'] | null; // chapter
    getMySubjectCreated: Array<NexusGenRootTypes['subject'] | null> | null; // [subject]
    getMySubjectSearch: Array<NexusGenRootTypes['subject'] | null> | null; // [subject]
    getSubjectById: NexusGenRootTypes['subject'] | null; // subject
    getSubjectBySearch: Array<NexusGenRootTypes['subject'] | null> | null; // [subject]
    getSubjectLessonID: NexusGenRootTypes['lesson'] | null; // lesson
    getUserById: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getUserProfileById: NexusGenRootTypes['profile'] | null; // profile
  }
  Subscription: { // field return type
    NewlyCreatedSubjectLesson: NexusGenRootTypes['lesson'] | null; // lesson
    NewlySubjectCreatedByUser: NexusGenRootTypes['subject'] | null; // subject
  }
  category: { // field return type
    category: string | null; // String
    categoryID: string | null; // ID
    subject: Array<NexusGenRootTypes['subject'] | null> | null; // [subject]
  }
  chapter: { // field return type
    chapter: string | null; // String
    chapterID: string | null; // ID
    content: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    status: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  enroll: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    enrollID: string | null; // ID
    status: string | null; // String
    subject: NexusGenRootTypes['subject'] | null; // subject
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['user'] | null; // user
  }
  lesson: { // field return type
    assessmentCount: number | null; // Int
    chapter: Array<NexusGenRootTypes['chapter'] | null> | null; // [chapter]
    chapterCount: number | null; // Int
    lesson: string | null; // String
    lessonID: string | null; // ID
  }
  profile: { // field return type
    bio: string | null; // String
    birthday: NexusGenScalars['Date'] | null; // Date
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    fullname: string | null; // String
    phone: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    profileID: string | null; // ID
    updatedAt: string | null; // String
    user: NexusGenRootTypes['user'] | null; // user
  }
  subject: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    enrolled: Array<NexusGenRootTypes['enroll'] | null> | null; // [enroll]
    image: string | null; // String
    language: string | null; // String
    lessonCount: number | null; // Int
    lessons: Array<NexusGenRootTypes['lesson'] | null> | null; // [lesson]
    subject: string | null; // String
    subjectID: string | null; // ID
    tags: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['user'] | null; // user
  }
  token: { // field return type
    token: string | null; // String
  }
  user: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: string | null; // String
    password: string | null; // String
    profile: NexusGenRootTypes['profile'] | null; // profile
    role: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    userID: string | null; // ID
    username: string | null; // String
    verified: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    checkUsernameAvailability: 'user'
    createLessonChapter: 'chapter'
    createSubject: 'subject'
    createSubjectCategory: 'category'
    createSubjectEnroll: 'enroll'
    createSubjectLesson: 'lesson'
    createUserAccount: 'user'
    deleteSubject: 'subject'
    deleteSubjectCategory: 'category'
    deleteSubjectLesson: 'lesson'
    deleteUserAccount: 'user'
    login: 'token'
    updateLessonChapter: 'chapter'
    updateSubject: 'subject'
    updateSubjectLesson: 'lesson'
    updateUserProfile: 'profile'
    updateVerfiedAccount: 'user'
  }
  Query: { // field return type name
    getAllCategory: 'category'
    getAllChapterByLessonID: 'chapter'
    getAllSubject: 'subject'
    getAllSubjectLesson: 'lesson'
    getAllUserByRole: 'user'
    getEnrollendById: 'enroll'
    getLessonChapter: 'chapter'
    getMySubjectCreated: 'subject'
    getMySubjectSearch: 'subject'
    getSubjectById: 'subject'
    getSubjectBySearch: 'subject'
    getSubjectLessonID: 'lesson'
    getUserById: 'user'
    getUserProfileById: 'profile'
  }
  Subscription: { // field return type name
    NewlyCreatedSubjectLesson: 'lesson'
    NewlySubjectCreatedByUser: 'subject'
  }
  category: { // field return type name
    category: 'String'
    categoryID: 'ID'
    subject: 'subject'
  }
  chapter: { // field return type name
    chapter: 'String'
    chapterID: 'ID'
    content: 'String'
    createdAt: 'DateTime'
    status: 'String'
    updatedAt: 'DateTime'
  }
  enroll: { // field return type name
    createdAt: 'DateTime'
    enrollID: 'ID'
    status: 'String'
    subject: 'subject'
    updatedAt: 'DateTime'
    user: 'user'
  }
  lesson: { // field return type name
    assessmentCount: 'Int'
    chapter: 'chapter'
    chapterCount: 'Int'
    lesson: 'String'
    lessonID: 'ID'
  }
  profile: { // field return type name
    bio: 'String'
    birthday: 'Date'
    createdAt: 'DateTime'
    fullname: 'String'
    phone: 'PhoneNumber'
    profileID: 'ID'
    updatedAt: 'String'
    user: 'user'
  }
  subject: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    enrolled: 'enroll'
    image: 'String'
    language: 'String'
    lessonCount: 'Int'
    lessons: 'lesson'
    subject: 'String'
    subjectID: 'ID'
    tags: 'String'
    updatedAt: 'DateTime'
    user: 'user'
  }
  token: { // field return type name
    token: 'String'
  }
  user: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    password: 'String'
    profile: 'profile'
    role: 'String'
    updatedAt: 'DateTime'
    userID: 'ID'
    username: 'String'
    verified: 'Boolean'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    checkUsernameAvailability: { // args
      username: string; // String!
    }
    createLessonChapter: { // args
      chapter: string; // String!
      content: string; // String!
      lessonID: string; // ID!
    }
    createSubject: { // args
      categoryID: string; // ID!
      file: NexusGenScalars['Upload']; // Upload!
      input?: NexusGenInputs['subjectInput'] | null; // subjectInput
      userID: string; // ID!
    }
    createSubjectCategory: { // args
      category: string; // String!
    }
    createSubjectEnroll: { // args
      subjectID: string; // ID!
      userID: string; // ID!
    }
    createSubjectLesson: { // args
      lesson: string; // String!
      subjectID: string; // ID!
    }
    createUserAccount: { // args
      role?: NexusGenEnums['userRoles'] | null; // userRoles
      user?: NexusGenInputs['userInput'] | null; // userInput
    }
    deleteSubject: { // args
      subjectID: string; // ID!
    }
    deleteSubjectCategory: { // args
      categoryID: string; // ID!
    }
    deleteSubjectLesson: { // args
      lessonID: string; // ID!
    }
    deleteUserAccount: { // args
      userID: string; // ID!
    }
    login: { // args
      password: string; // String!
      username: string; // String!
    }
    updateLessonChapter: { // args
      chapter: string; // String!
      chapterID: string; // ID!
      content: string; // String!
    }
    updateSubject: { // args
      subject: string; // String!
      subjectID: string; // ID!
    }
    updateSubjectLesson: { // args
      lesson: string; // String!
      lessonID: string; // ID!
    }
    updateUserProfile: { // args
      input?: NexusGenInputs['profileInput'] | null; // profileInput
    }
    updateVerfiedAccount: { // args
      userID: string; // ID!
    }
  }
  Query: {
    getAllChapterByLessonID: { // args
      lessonID: string; // ID!
    }
    getAllSubject: { // args
      skip: number; // Int!
      take: number; // Int!
    }
    getAllSubjectLesson: { // args
      subjectID: string; // ID!
    }
    getAllUserByRole: { // args
      role?: NexusGenEnums['userRoles'] | null; // userRoles
      skip: number; // Int!
      take: number; // Int!
    }
    getEnrollendById: { // args
      enrollID: string; // ID!
    }
    getLessonChapter: { // args
      chapterID: string; // ID!
    }
    getMySubjectCreated: { // args
      userID: string; // ID!
    }
    getMySubjectSearch: { // args
      search: string; // String!
      userID: string; // ID!
    }
    getSubjectById: { // args
      subjectID: string; // ID!
    }
    getSubjectBySearch: { // args
      search: string; // String!
    }
    getSubjectLessonID: { // args
      lessonID: string; // ID!
    }
    getUserById: { // args
      userID: string; // ID!
    }
    getUserProfileById: { // args
      userID: string; // ID!
    }
  }
  Subscription: {
    NewlyCreatedSubjectLesson: { // args
      subjectID: string; // ID!
    }
    NewlySubjectCreatedByUser: { // args
      userID: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}